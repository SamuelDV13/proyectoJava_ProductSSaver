package org.sdv.clases.vista;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.sdv.clases.util.AbstractExportar;
import org.sdv.clases.util.ExportarText;
import org.sdv.clases.util.Extensiones;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class SwingOpciones extends JFrame {
    private JPanel panel_opciones;
    private JTextField txt_archivo;
    private JTextField txt_ruta;
    private JButton guardarButton;
    private JButton btn_dir;
    private JRadioButton rb_txt;
    private JRadioButton rb_xlsx;


    public SwingOpciones() {
        getContentPane().add(panel_opciones);

        setTitle("Opciones");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(370, 400);
        setLocationRelativeTo(null);
        setResizable(false);

        txt_ruta.setText(AbstractExportar.getRUTA());
        txt_archivo.setText(AbstractExportar.getARCHIVO());

        ButtonGroup bg = new ButtonGroup();
        bg.add(rb_txt);
        bg.add(rb_xlsx);

        rb_txt.setSelected(true);

        initEvents();
    }


    private void initEvents() {
        btn_dir.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                txt_ruta.setText(fileChooser.getSelectedFile().getAbsolutePath());
            }
        });


        guardarButton.addActionListener(e -> {

            String ruta = txt_ruta.getText();
            String archivo = txt_archivo.getText();

            if (!ruta.isBlank() && !archivo.isBlank() && (rb_txt.isSelected() || rb_xlsx.isSelected())) {
                AbstractExportar.setDatos(ruta, archivo, getExtension());
                JOptionPane.showMessageDialog(null, "Cambios realizados exitosamente", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Llena todos los campos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        });

    }


    private Extensiones getExtension() {
        if (rb_txt.isSelected()) return Extensiones.TXT;
        if (rb_xlsx.isSelected()) return Extensiones.XLSX;
        return Extensiones.TXT;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel_opciones = new JPanel();
        panel_opciones.setLayout(new GridLayoutManager(12, 3, new Insets(0, 0, 0, 0), 0, 3));
        panel_opciones.setBackground(new Color(-2301216));
        panel_opciones.setEnabled(true);
        panel_opciones.setMaximumSize(new Dimension(350, 1000));
        panel_opciones.setMinimumSize(new Dimension(370, 400));
        panel_opciones.setPreferredSize(new Dimension(370, 250));
        panel_opciones.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 14, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-15917790));
        label1.setText("Opciones");
        panel_opciones.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-15917790));
        label2.setText("Ruta del archivo:");
        panel_opciones.add(label2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 14, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setForeground(new Color(-15917790));
        label3.setText("Nombre del archivo:");
        panel_opciones.add(label3, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txt_ruta = new JTextField();
        txt_ruta.setColumns(0);
        Font txt_rutaFont = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 12, txt_ruta.getFont());
        if (txt_rutaFont != null) txt_ruta.setFont(txt_rutaFont);
        panel_opciones.add(txt_ruta, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, 10), new Dimension(215, 25), new Dimension(250, 34), 0, false));
        txt_archivo = new JTextField();
        Font txt_archivoFont = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 12, txt_archivo.getFont());
        if (txt_archivoFont != null) txt_archivo.setFont(txt_archivoFont);
        panel_opciones.add(txt_archivo, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, 10), new Dimension(215, 25), new Dimension(250, 34), 0, false));
        final Spacer spacer1 = new Spacer();
        panel_opciones.add(spacer1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(1, 1), new Dimension(1, 25), new Dimension(1, 30), 0, false));
        final Spacer spacer2 = new Spacer();
        panel_opciones.add(spacer2, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(1, 1), new Dimension(-1, 20), new Dimension(50, 50), 0, false));
        final Spacer spacer3 = new Spacer();
        panel_opciones.add(spacer3, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(1, 3), new Dimension(1, 15), new Dimension(1, 30), 0, false));
        btn_dir = new JButton();
        btn_dir.setAlignmentX(0.0f);
        btn_dir.setAutoscrolls(false);
        btn_dir.setHorizontalAlignment(0);
        btn_dir.setHorizontalTextPosition(11);
        btn_dir.setText("...");
        panel_opciones.add(btn_dir, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(1, 1), new Dimension(20, 20), new Dimension(100, 100), 0, false));
        final JLabel label4 = new JLabel();
        Font label4Font = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 14, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setForeground(new Color(-15917790));
        label4.setText("Tipo de archivo:");
        panel_opciones.add(label4, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        guardarButton = new JButton();
        Font guardarButtonFont = this.$$$getFont$$$("JetBrains Mono", Font.PLAIN, 14, guardarButton.getFont());
        if (guardarButtonFont != null) guardarButton.setFont(guardarButtonFont);
        guardarButton.setText("Guardar");
        panel_opciones.add(guardarButton, new GridConstraints(11, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rb_txt = new JRadioButton();
        rb_txt.setText("Texto plano");
        panel_opciones.add(rb_txt, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rb_xlsx = new JRadioButton();
        rb_xlsx.setText("Excel");
        panel_opciones.add(rb_xlsx, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel_opciones;
    }

}
